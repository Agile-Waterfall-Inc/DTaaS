name: CD - Deploy Prod

on:
  release:
    types: [published]

jobs:
  buildApi:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push API to GitHub Packages
        uses: docker/build-push-action@v2
        with:
          context: src/api/
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/agile-waterfall-inc/flooq-api:latest
            ghcr.io/agile-waterfall-inc/flooq-api:${{ github.event.release.tag_name }}
  buildIdentity:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Identity to GitHub Packages
        uses: docker/build-push-action@v2
        with:
          context: src/identity/
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/agile-waterfall-inc/flooq-identity:latest
            ghcr.io/agile-waterfall-inc/flooq-identity:${{ github.event.release.tag_name }}
  buildEditor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Editor to GitHub Packages
        uses: docker/build-push-action@v2
        with:
          context: src/editor/
          push: true
          tags: |
            ghcr.io/agile-waterfall-inc/flooq-editor:latest
            ghcr.io/agile-waterfall-inc/flooq-editor:${{ github.event.release.tag_name }}
  buildExecutor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Executor to GitHub Packages
        uses: docker/build-push-action@v2
        with:
          context: src/executor/
          push: true
          tags: |
            ghcr.io/agile-waterfall-inc/flooq-executor:latest
            ghcr.io/agile-waterfall-inc/flooq-executor:${{ github.event.release.tag_name }}
  buildLanding:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Landing to GitHub Packages
        uses: docker/build-push-action@v2
        with:
          context: src/landing/
          push: true
          tags: |
            ghcr.io/agile-waterfall-inc/flooq-landing:latest
            ghcr.io/agile-waterfall-inc/flooq-landing:${{ github.event.release.tag_name }}

  publish:
    runs-on: ubuntu-latest
    needs: [buildApi, buildIdentity, buildEditor, buildExecutor, buildLanding]
    steps:
      - uses: actions/checkout@v2

      - uses: azure/k8s-set-context@v2
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG_PROD }}
          context: init-lab

      - uses: azure/setup-helm@v1
        with:
          version: 3.*

      - name: Helm Install
        run: |
          helm dependency update ./.helm

          helm upgrade --install \
          -f ./.helm/values-prod.yaml \
          --set version=${{ github.event.release.tag_name }} \
          --set password=${{ secrets.DB_PASSWORD }} \
          --set password=${{ secrets.DB_PASSWORD }} \
          --set auth.github.clientId=${{ secrets.PROD_GITHUB_CLIENT_ID }} \
          --set auth.github.clientSecret=${{ secrets.PROD_GITHUB_CLIENT_SECRET }} \
          --set auth.next.secret=${{ secrets.NEXT_SECRET }} \
          --set auth.identity.clientId=${{ secrets.IDENTITY_CLIENT_ID }} \
          --set auth.identity.clientSecret=${{ secrets.IDENTITY_CLIENT_SECRET }} \
          --set token.encryption.key=${{ secrets.TOKEN_ENCRYPTION_KEY }} \
          --set token.encryption.iv=${{ secrets.TOKEN_ENCRYPTION_IV }} \
          flooq-prod \
          ./.helm

      - name: Set Current Version
        continue-on-error: true
        run: |
          git fetch --unshallow --tags

          git tag | tail -1

          VERSION="'COMMIT: $(echo $GITHUB_SHA)'"
          TAG="'$(git tag | tail -1)'"
          NOTES="'Deployed at: $(date +%Y-%m-%d_%H-%M-%S)'"
          USER='"postgres"'
          DATABASE='"flooqdatabase"'
          TABLE='\"Versions\"'
          COL_0='\"Tag\"'
          COL_1='\"Name\"'
          COL_2='\"Notes\"'

          QUERY="\"INSERT INTO ${TABLE} ($COL_0, $COL_1, $COL_2) VALUES (${TAG}, ${VERSION}, ${NOTES});\""
          COMMAND="PGPASSWORD=${{ secrets.DB_POSTGRES_PASSWORD }} psql -U $USER -d $DATABASE -c $QUERY"

          DELETE="\"DELETE FROM ${TABLE};\""
          DELETE_COMMAND="PGPASSWORD=${{ secrets.DB_POSTGRES_PASSWORD }} psql -U $USER -d $DATABASE -c $DELETE"

          kubectl exec flooq-prod-postgresql-0 -- sh -c "$DELETE_COMMAND"
          kubectl exec flooq-prod-postgresql-0 -- sh -c "$COMMAND"
