name: CI Build - API

on:
  workflow_dispatch:
    inputs:
  push:
    paths:
    - 'src/api/**'
  pull_request:
    paths: 
    - 'src/api/**'

defaults:
  run:
    shell: bash
    working-directory: src/api/

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        mkdir -p ./.sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
    - name: Restore dependencies
      run: dotnet restore

    - name: Build, Test, and Analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        ./.sonar/scanner/dotnet-sonarscanner begin /k:"flooq_api" /o:"agile-waterfall" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        
        dotnet build --no-restore
        dotnet test --no-build --verbosity normal

        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  publish:
    runs-on: ubuntu-latest
    needs: [build]
    if: contains('refs/heads/main', github.ref) || github.event_name == 'release'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push to GitHub Packages
        uses: docker/build-push-action@v2
        if: github.event_name != 'release' || github.event.action != 'created'
        with:
          context: src/api/
          push: true
          tags: |
            ghcr.io/agile-waterfall-inc/flooq-api:latest
      - name: Push to GitHub Packages
        uses: docker/build-push-action@v2
        if: github.event_name == 'release' && github.event.action == 'created'
        with:
          context: src/api/
          push: true
          tags: |
            ghcr.io/agile-waterfall-inc/flooq-api:${{ github.event.release.tag_name }}
            ghcr.io/agile-waterfall-inc/flooq-api:latest
            

