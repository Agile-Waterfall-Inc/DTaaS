name: CD - Deploy Staging

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      images:
        build: false

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      editor: ${{ steps.filter.outputs.editor }}
      executor: ${{ steps.filter.outputs.executor }}
      identity: ${{ steps.filter.outputs.identity }}
      landing: ${{ steps.filter.outputs.landing }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            api:
              - 'src/api/**'
            editor:
              - 'src/editor/**'
            executor:
              - 'src/executor/**'
            identity:
              - 'src/identity/**'
            landing:
              - 'src/landing/**'

  buildApi:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: needs.prep.outputs.api == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: needs.prep.outputs.api == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push API to GitHub Packages
        uses: docker/build-push-action@v2
        if: needs.prep.outputs.api == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          context: src/api/
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/agile-waterfall/flooq-api:latest
  buildIdentity:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: needs.prep.outputs.identity == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: needs.prep.outputs.identity == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Identity to GitHub Packages
        uses: docker/build-push-action@v2
        if: needs.prep.outputs.identity == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          context: src/identity/
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/agile-waterfall/flooq-identity:latest
  buildEditor:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: needs.prep.outputs.editor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: needs.prep.outputs.editor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Editor to GitHub Packages
        uses: docker/build-push-action@v2
        if: needs.prep.outputs.editor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          context: src/editor/
          push: true
          tags: |
            ghcr.io/agile-waterfall/flooq-editor:latest
  buildExecutor:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: needs.prep.outputs.executor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: needs.prep.outputs.executor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Executor to GitHub Packages
        uses: docker/build-push-action@v2
        if: needs.prep.outputs.executor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          context: src/executor/
          push: true
          tags: |
            ghcr.io/agile-waterfall/flooq-executor:latest
  buildLanding:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: needs.prep.outputs.landing == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: needs.prep.outputs.landing == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Landing to GitHub Packages
        uses: docker/build-push-action@v2
        if: needs.prep.outputs.landing == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          context: src/landing/
          push: true
          tags: |
            ghcr.io/agile-waterfall/flooq-landing:latest

  publish:
    runs-on: ubuntu-latest
    needs: [ buildApi, buildIdentity, buildEditor, buildExecutor, buildLanding]
    steps:
      - uses: actions/checkout@v2

      - uses: azure/k8s-set-context@v2
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_FLOOQ_CONFIG }}
          context: k8s-flooq

      - uses: azure/setup-helm@v1
        with:
          version: 3.*

      - name: Helm Install
        run: |
          helm dependency update ./.helm-own
          helm upgrade --install \
            -n staging \
            -f ./.helm-own/values-staging.yaml \
            --set services.database.host=${{ secrets.STAGING_DB_HOST }} \
            --set services.database.password=${{ secrets.STAGING_DB_PASSWORD }} \
            --set auth.github.clientId=${{ secrets.STAGING_GITHUB_CLIENT_ID }} \
            --set auth.github.clientSecret=${{ secrets.STAGING_GITHUB_CLIENT_SECRET }} \
            --set auth.next.secret=${{ secrets.STAGING_NEXT_SECRET }} \
            --set auth.identity.clientId=${{ secrets.STAGING_IDENTITY_CLIENT_ID }} \
            --set auth.identity.clientSecret=${{ secrets.STAGING_IDENTITY_CLIENT_SECRET }} \
            --set token.encryption.key=${{ secrets.STAGING_TOKEN_ENCRYPTION_KEY }} \
            --set token.encryption.iv=${{ secrets.STAGING_TOKEN_ENCRYPTION_IV }} \
            flooq \
            ./.helm-own
  
  testDeployment:
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 17.x
        uses: actions/setup-node@v2
        with:
          node-version: 17.x

      - name: Clean Install
        working-directory: src/editor
        run: npm ci

      - name: Install Xvfb
        working-directory: src/editor
        run: sudo apt-get install xvfb

      - name: Run Nightwatch Tests
        working-directory: src/editor
        run: xvfb-run --auto-servernum npm run test-nightwatch
  