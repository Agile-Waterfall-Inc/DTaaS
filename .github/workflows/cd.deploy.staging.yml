name: CD - Deploy Staging

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      images:
        build: false

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      editor: ${{ steps.filter.outputs.editor }}
      executor: ${{ steps.filter.outputs.executor }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            api:
              - 'src/api/**'
            editor:
              - 'src/editor/**'
            executor:
              - 'src/executor/**'

  buildApi:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: needs.prep.outputs.api == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        if: needs.prep.outputs.api == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push API to GitHub Packages
        uses: docker/build-push-action@v2
        if: needs.prep.outputs.api == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          context: src/api/
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/agile-waterfall-inc/flooq-api:latest
  buildEditor:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: needs.prep.outputs.editor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        if: needs.prep.outputs.editor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Editor to GitHub Packages
        uses: docker/build-push-action@v2
        if: needs.prep.outputs.editor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          context: src/editor/
          push: true
          tags: |
            ghcr.io/agile-waterfall-inc/flooq-editor:latest
  buildExecutor:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: needs.prep.outputs.executor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        if: needs.prep.outputs.executor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Executor to GitHub Packages
        uses: docker/build-push-action@v2
        if: needs.prep.outputs.executor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          context: src/executor/
          push: true
          tags: |
            ghcr.io/agile-waterfall-inc/flooq-executor:latest

  publish:
    runs-on: ubuntu-latest
    needs: [buildApi, buildEditor, buildExecutor]
    steps:
      - uses: actions/checkout@v2

      - uses: azure/k8s-set-context@v2
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG }}
          context: init-lab

      - uses: azure/k8s-bake@v2
        with:
          renderEngine: "helm"
          helmChart: "./.helm/"
          overrideFiles: './.helm/values-staging.yaml'
          overrides: |
            password:${{ secrets.DB_PASSWORD }}
          helm-version: "latest"
          namespace: class-pm4-2022-5-staging
          releaseName: flooq-staging
        id: bake
        
      - uses: Azure/k8s-deploy@v1.4
        with:
          action: deploy
          namespace: class-pm4-2022-5-staging
          manifests: ${{ steps.bake.outputs.manifestsBundle }}    
          strategy: blue-green
          route-method: service

      - uses: Azure/k8s-deploy@v1.4
        if: ${{ failure() }}
        with:
          action: reject
          namespace: class-pm4-2022-5-staging
          manifests: ${{ steps.bake.outputs.manifestsBundle }}    
          strategy: blue-green
          route-method: service

      - uses: Azure/k8s-deploy@v1.4
        with:
          action: promote
          namespace: class-pm4-2022-5-staging
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          strategy: blue-green
          route-method: service

      - name: Rollout
        run: |
          kubectl rollout restart deploy api
          kubectl rollout restart deploy editor
          kubectl rollout restart deploy executor

      - name: Set Env Variables
        run: |
          echo "GITHUB_GIT_TAG=$(git tag | sort -V | tail -1)" >> $GITHUB_ENV
          echo "GITHUB_TIME=$(date +%Y-%m-%d_%H-%M-%S)" >> $GITHUB_ENV

      - name: Set Current Version
        run: |
          echo ${{env.GITHUB_GIT_TAG}}
          echo ${{env.GITHUB_TIME}}
          echo ${{env.TIME}}

          var=$'"INSERT INTO \\"Versions\\" (\\"Tag\\", \\"Name\\", \\"Notes\\") VALUES (\'${{env.GIT_TAG}}\', \'${{env.GITHUB_SHA}}\', \'${{env.TIME}}\');"'
          kubectl exec flooq-staging-postgresql-0 -- sh -c "PGPASSWORD=${{secrets.DB_POSTGRES_PASSWORD}} psql -U \"postgres\" -d \"flooqdatabase\" -c ${var}"

