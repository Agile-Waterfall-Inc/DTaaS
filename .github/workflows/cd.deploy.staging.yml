name: CD - Deploy Staging

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      images:
        build: false

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      editor: ${{ steps.filter.outputs.editor }}
      executor: ${{ steps.filter.outputs.executor }}
      identity: ${{ steps.filter.outputs.identity }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            api:
              - 'src/api/**'
            editor:
              - 'src/editor/**'
            executor:
              - 'src/executor/**'
            identity:
              - 'src/identity/**'

  buildApi:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: needs.prep.outputs.api == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        if: needs.prep.outputs.api == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push API to GitHub Packages
        uses: docker/build-push-action@v2
        if: needs.prep.outputs.api == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          context: src/api/
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/agile-waterfall-inc/flooq-api:latest
  buildIdentity:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: needs.prep.outputs.identity == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        if: needs.prep.outputs.identity == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Identity to GitHub Packages
        uses: docker/build-push-action@v2
        if: needs.prep.outputs.identity == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          context: src/identity/
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/agile-waterfall-inc/flooq-identity:latest
  buildEditor:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: needs.prep.outputs.editor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        if: needs.prep.outputs.editor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Editor to GitHub Packages
        uses: docker/build-push-action@v2
        if: needs.prep.outputs.editor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          context: src/editor/
          push: true
          tags: |
            ghcr.io/agile-waterfall-inc/flooq-editor:latest
  buildExecutor:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: needs.prep.outputs.executor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        if: needs.prep.outputs.executor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Executor to GitHub Packages
        uses: docker/build-push-action@v2
        if: needs.prep.outputs.executor == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.images.build == true)
        with:
          context: src/executor/
          push: true
          tags: |
            ghcr.io/agile-waterfall-inc/flooq-executor:latest

  publish:
    runs-on: ubuntu-latest
    needs: [buildApi, buildIdentity, buildEditor, buildExecutor]
    steps:
      - uses: actions/checkout@v2

      - uses: azure/k8s-set-context@v2
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG }}
          context: init-lab

      - uses: azure/setup-helm@v1
        with:
          version: 3.*

      - name: Helm Install
        run: |
          helm dependency update ./.helm

          helm upgrade --install \
          -f ./.helm/values-staging.yaml \
          --set password=${{ secrets.DB_PASSWORD }} \
          --set auth.github.clientId=${{ secrets.STAGING_GITHUB_CLIENT_ID }} \
          --set auth.github.clientSecret=${{ secrets.STAGING_GITHUB_CLIENT_SECRET }} \
          --set auth.next.secret=${{ secrets.NEXT_SECRET }} \
          --set auth.identity.clientId=${{ secrets.IDENTITY_CLIENT_ID }} \
          --set auth.identity.clientSecret=${{ secrets.IDENTITY_CLIENT_SECRET }} \
          flooq-staging \
          ./.helm

      - name: Set Current Version
        continue-on-error: true
        run: |
          git fetch --unshallow --tags

          git tag | tail -1

          VERSION="'COMMIT: $(echo $GITHUB_SHA)'"
          TAG="'$(git tag | tail -1)'"
          NOTES="'Deployed at: $(date +%Y-%m-%d_%H-%M-%S)'"
          USER='"postgres"'
          DATABASE='"flooqdatabase"'
          TABLE='\"Versions\"'
          COL_0='\"Tag\"'
          COL_1='\"Name\"'
          COL_2='\"Notes\"'

          QUERY="\"INSERT INTO ${TABLE} ($COL_0, $COL_1, $COL_2) VALUES (${TAG}, ${VERSION}, ${NOTES});\""
          COMMAND="PGPASSWORD=${{ secrets.DB_POSTGRES_PASSWORD }} psql -U $USER -d $DATABASE -c $QUERY"

          DELETE="\"DELETE FROM ${TABLE};\""
          DELETE_COMMAND="PGPASSWORD=${{ secrets.DB_POSTGRES_PASSWORD }} psql -U $USER -d $DATABASE -c $DELETE"

          kubectl exec flooq-staging-postgresql-0 -- sh -c "$DELETE_COMMAND"
          kubectl exec flooq-staging-postgresql-0 -- sh -c "$COMMAND"

      - name: Nightwatch Test
        uses: actions/setup-node@v2
        working-directory: ./src/editor
        with:
          node-version: 17.x
        run: |
          npm ci
          npm run test-nightwatch