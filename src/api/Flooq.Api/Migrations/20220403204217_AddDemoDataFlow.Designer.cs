// <auto-generated />
using System;
using Flooq.Api.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(FlooqContext))]
    [Migration("20220403204217_AddDemoDataFlow")]
    partial class AddDemoDataFlow
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Flooq.Api.Models.DataFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastEdited")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataFlows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de780797-b556-4122-b133-7a446f79b024"),
                            Definition = "{\n  \"nodes\": [\n    {\n      \"id\": \"1\",\n      \"dragHandle\": \".custom-drag-handle\",\n      \"type\": \"httpIn\",\n      \"data\": {\n        \"title\": \"Http Input\",\n        \"input\": {\n          \"url\": \"https://executor.dataflow.ch/IJF9K2\",\n          \"method\": \"post\",\n          \"contentType\": \"application/json\",\n          \"sampleBody\": \"{}\"\n        },\n        \"incomingHandles\": [],\n        \"outgoingHandles\": [\n          {\n            \"id\": \"11\",\n            \"name\": \"a\"\n          }\n        ]\n      },\n      \"position\": {\n        \"x\": 0,\n        \"y\": 0\n      }\n    },\n    {\n      \"id\": \"2\",\n      \"dragHandle\": \".custom-drag-handle\",\n      \"type\": \"filter\",\n      \"data\": {\n        \"title\": \"Filter\",\n        \"filter\": {\n          \"field\": \"tags\",\n          \"value\": \"secret\",\n          \"condition\": \"ne\"\n        },\n        \"incomingHandles\": [\n          {\n            \"id\": \"21\",\n            \"name\": \"a\"\n          }\n        ],\n        \"outgoingHandles\": [\n          {\n            \"id\": \"21\",\n            \"name\": \"a\"\n          }\n        ]\n      },\n      \"position\": {\n        \"x\": 400,\n        \"y\": 100\n      }\n    },\n    {\n      \"id\": \"3\",\n      \"dragHandle\": \".custom-drag-handle\",\n      \"type\": \"httpOut\",\n      \"data\": {\n        \"title\": \"Http Output\",\n        \"output\": {\n          \"url\": \"\",\n          \"method\": \"post\",\n          \"contentType\": \"application/json\",\n          \"sampleBody\": \"{}\"\n        },\n        \"incomingHandles\": [\n          {\n            \"id\": \"3a\",\n            \"name\": \"a\"\n          }\n        ],\n        \"outgoingHandles\": []\n      },\n      \"position\": {\n        \"x\": 800,\n        \"y\": 0\n      }\n    }\n  ],\n  \"edges\": [\n    {\n      \"id\": \"e1-2\",\n      \"fromNode\": \"1\",\n      \"fromHandle\": \"11\",\n      \"toNode\": \"2\",\n      \"toHandle\": \"2a\"\n    },\n    {\n      \"id\": \"e2-3\",\n      \"fromNode\": \"2\",\n      \"fromHandle\": \"21\",\n      \"toNode\": \"3\",\n      \"toHandle\": \"3a\"\n    }\n  ]\n}",
                            LastEdited = new DateTime(2022, 3, 5, 13, 45, 12, 0, DateTimeKind.Utc),
                            Name = "Demo Flow #1",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Flooq.Api.Models.Version", b =>
                {
                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("Tag");

                    b.ToTable("Versions");
                });
#pragma warning restore 612, 618
        }
    }
}
